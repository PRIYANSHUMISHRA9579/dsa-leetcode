https://leetcode.com/problems/out-of-boundary-paths/

https://youtu.be/YH-ZG0q--DQ?si=2VDfqyKWW_UFRWlQ

MEIMOISED SOLUTION:
class Solution {
public:
    int N;
    int M;
   // int ans;
    int MOD=1e9+7;
    int dp[51][51][51];
    
    int solve(int row,int col,int moves)
    {
        if(row<0 ||row>=N ||col<0 || col>=M )
            return 1;
        if(moves<=0)
            return 0;
        if(dp[row][col][moves]!=-1)
            return dp[row][col][moves];
        int ans=0;
        int delRow[]={-1,1,0,0};
        int delCol[]={0,0,1,-1};
        for(int i=0;i<4;i++)
        {
            int newRow=row+delRow[i];
            int newCol=col+delCol[i];
            ans=(ans+solve(newRow,newCol,moves-1))%MOD;
            
        }
        return dp[row][col][moves]=ans;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        
        //ans=0;
        memset(dp,-1,sizeof(dp));
        N=m;
        M=n;
        return solve(startRow,startColumn,maxMove);
        
    }
};
The time complexity of the given solution is O(N * M * maxMove), where N and M are the dimensions of the grid, 
and maxMove is the maximum number of moves allowed. This is because there are three parameters involved in the 
recursive function (`row`, `col`, and `moves`), and for each set of these parameters, there are four possible recursive calls in the loop.

The space complexity is O(N * M * maxMove) due to the memoization array `dp`, which stores intermediate results of subproblems to avoid redundant computations.

In summary:
- Time complexity: O(N * M * maxMove)
- Space complexity: O(N * M * maxMove)





