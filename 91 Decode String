https://leetcode.com/problems/decode-ways/

https://youtu.be/HW-y3gvQTVQ?si=kRQaCrZuBhjUWUTE

Recursive Solution :     TC O(2^n)

class Solution {
public:
    int solve(int i,string &s,int n)
    {
       
        if(i==n)  //one valid split found
            return 1;
        if(s[i]=='0')
            return 0;
        int result=solve(i+1,s,n);
        if(i+1<n)
        {
            if(s[i]=='1'||s[i]=='2'&&s[i+1]<='6')
                result+=solve(i+2,s,n);
        }
        return result;
    }
    int numDecodings(string s) {
        int n=s.size();
        int ans=solve(0,s,n);
        return ans;
        
    }
};


Top Down Memoised Solution :

class Solution {                   TC O(N)
public:
    int dp[101];
    int solve(int i,string &s,int n)
    {
        if(dp[i]!=-1)
            return dp[i];
       
        if(i==n)  //one valid split found
            return dp[i]= 1;
        if(s[i]=='0')
            return dp[i]=0;
        int result=solve(i+1,s,n);
        if(i+1<n)
        {
            if(s[i]=='1'||s[i]=='2'&&s[i+1]<='6')
                result+=solve(i+2,s,n);
        }
        return dp[i]=result;
    }
    int numDecodings(string s) {
        int n=s.size();
        memset(dp,-1,sizeof(dp));
        int ans=solve(0,s,n);
        return ans;
        
    }
};


BOTTOM UP DP:   TC(O(N))

class Solution {
public:
    int numDecodings(string s) {
        int n=s.size();
        vector<int>dp(n+1,0);
        dp[n]=1;// 
        for(int i=n-1;i>=0;i--)
        {
            if(s[i]=='0')
                dp[i]=0;
            else{
                dp[i]=dp[i+1];//solve(i+1)
                
                if(i+1<n)
                {
                    if(s[i]=='1'||s[i]=='2'&&s[i+1]<='6')
                        dp[i]+=dp[i+2];//solve(i+2);
                }
            }
            
        }
         return dp[0];
        
    }
};
