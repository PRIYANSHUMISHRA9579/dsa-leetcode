https://leetcode.com/problems/house-robber/
recursive:
class Solution {
public:
    int n;
    int solve(int i,vector<int>&nums)
    {
        if(i>=n)
            return 0;
        int include=nums[i]+solve(i+2,nums);
        int exclude=solve(i+1,nums);
        return max(include,exclude);
    }
    int rob(vector<int>& nums) {
        n=nums.size();
        return solve(0,nums);
        
    }
};

meimoised:
class Solution {
public:
    int n;
    vector<int>dp;
    int solve(int i,vector<int>&nums)
    {
        if(i>=n)
            return 0;
        if(dp[i]!=-1)
            return dp[i];
        int include=nums[i]+solve(i+2,nums);
        int exclude=solve(i+1,nums);
        return dp[i]=max(include,exclude);
    }
    int rob(vector<int>& nums) {
        n=nums.size();
        dp=vector<int>(n+1,-1);
        return solve(0,nums);
        
    }
};

bottom up:
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1);
        dp[0]=0;//initialise
        
        dp[1]=nums[0];
        if(n>1)
        {
            for(int i=2;i<=n;i++)
            {
                dp[i]=max(dp[i-2]+nums[i-1],dp[i-1]);
            }
        }
        return dp[n];
        
        
    }
};
bottom up with constant space:
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
       // vector<int>dp(n+1);
       // dp[0]=0;//initialise
        int prevprev=0;
        
        int prev=nums[0];
        if(n>1)
        {
            for(int i=2;i<=n;i++)
            {
                int temp=max(prevprev+nums[i-1],prev);
                prevprev=prev;
                prev=temp;
            }
        }
        return prev;
        
        
    }
};
