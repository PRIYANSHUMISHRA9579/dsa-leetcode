https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/

https://youtu.be/nQw9gVaIjGo?si=QErAfrvZ_wBnSH-g


class Solution {                         TC (K^n)
public:
   
    int MOD =1e9+7;
    int solve(int n,int k,int target)
    {
        if (target<0)
            return 0;
       
        
        if(n==0) return target==0;
        
        int ans=0;
        for(int i=1;i<=k;i++)
            ans=(ans+solve(n-1,k,target-i))%MOD;
        
        return ans; 
    }
    
    int numRollsToTarget(int n, int k, int target) {
       
      return  solve(n,k,target);
        
        
       
        
    }
};












Meimosisation :


class Solution {                         TC (K^n)
public:
    int dp[32][1002];
    int MOD =1e9+7;
    int solve(int n,int k,int target)
    {
        if (target<0)
            return 0;
        if(dp[n][target]!=-1)
            return dp[n][target];
        
        if(n==0) return target==0;
        
        int ans=0;
        for(int i=1;i<=k;i++)
            ans=(ans+solve(n-1,k,target-i))%MOD;   //2 variables are changing hence 2d array for dp
        
        return dp[n][target]=ans; 
    }
    
    int numRollsToTarget(int n, int k, int target) {
        memset(dp,-1,sizeof(dp));
      return  solve(n,k,target);
        
        
       
        
    }
};



Bottom up DP:

class Solution {
public:                                                               TC O(N*K*TARGET)
    
    int numRollsToTarget(int n, int k, int target) {
        int MOD=1e9+7;
        
        vector<vector<int>>dp(n+1,vector<int>(target+1));
        // for(int i=0;i<n+1;i++)
        // {
        //     for(int j=0;j<target+1;j++)
        //     {
        //         if(i==0)
        //             dp[i][j]=0;
        //         if(j==0)
        //             dp[i][j]=0;
        //     }
        // }
        dp[0][0]=1;
        
        for(int i=1;i<n+1;i++)
        {
            for(int j=1;j<target+1;j++)
            {
                int ans=0;
                for(int face=1;face<=k;face++)
                { if(j-face>=0){
                    ans=(ans+dp[i-1][j-face])%MOD;
                }}
                dp[i][j]=ans;
            }
        }
        
       return dp[n][target]; 
    }
};
