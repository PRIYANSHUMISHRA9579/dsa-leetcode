https://leetcode.com/problems/k-inverse-pairs-array/  

https://youtu.be/y9yo1kyW7Bg?si=YFQoOo_sF5x0Rba3




RECURSIVE+MEIMOISATION         THIS GAVE TLE
class Solution {
public:
    int MOD=1e9+7;
    int dp[1001][1001];
    int solve(int n ,int k)
    {
        if(n==0)
            return 0;
        if(k==0)//sorted array
            return 1;
        if(dp[n][k]!=-1)
            return dp[n][k];
        int result=0;
        //if i am planning to add nth element in array max inversions this element can create is n-1
        for(int inv=0;inv<=min(k,n-1);inv++)
        {
            result =(result+solve(n-1,k-inv))%MOD;
        }
        return dp[n][k]=result;
        
    }
    int kInversePairs(int n, int k) {
        memset(dp,-1,sizeof(dp));
      return solve(n,k);
        
        
    }
};


APPROACH 2:
class Solution {
public:
    const int M = 1e9+7;
    int kInversePairs(int n, int k) {
        vector<vector<int>> t(n+1, vector<int>(k+1));

        for(int i = 0; i < n+1; i++) {
            t[i][0] = 1;
        }

        for(int i = 1; i<=n; i++) {
            
            for(int j = 1; j <= k; j++) {

                for(int inv = 0; inv <= min(i-1, j); inv++) {
                    t[i][j] = (t[i][j] + t[i-1][j-inv])%M;
                }

            }
        }
        return t[n][k];
    }
};

//Approach-3 (Improving on Approach-1 above) - DP with cumulative sum approach
//Time : O(n*k)
//S.C : O(n*k)
//Read the comment below how people got this idea
class Solution {
public:
    int M = 1e9+7;

    int kInversePairs(int n, int k) {
        vector<vector<int>> t(n+1, vector<int>(k+1));
        //t[i][j] = total number of arrays having (1 to i) and exactly j inversions

        //for j = 0, t[i][0] = 1
        for(int i = 0; i <= n; i++) {
            t[i][0] = 1;
        }

        //O(n*k)
        for(int i = 1; i <= n; i++) {
            long long cumSum = 1;
            for(int j = 1; j <= k; j++) {
                
                cumSum += t[i-1][j];
                if(j >= i) {
                    cumSum -= t[i-1][j-i];
                }
                t[i][j] = cumSum % M;
            }
        }


        return t[n][k];

    }
};


