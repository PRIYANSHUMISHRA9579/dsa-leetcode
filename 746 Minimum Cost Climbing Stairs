https://leetcode.com/problems/min-cost-climbing-stairs/

https://youtu.be/S31W3kohFDk?si=4UrT2mw-N8l_Lh1t

Recursive:

class Solution {
public:
    
    int solve (vector<int>&cost,int n)
    {
       
        if(n==0)
            return cost[0];
        if(n==1)
            return cost[1];
        int cos=cost[n]+min(solve(cost,n-1),solve(cost,n-2));
        return cos;
    }
    int minCostClimbingStairs(vector<int>& cost) {
        
        
        int n=cost.size();
        int ans=min(solve(cost,n-1),solve(cost,n-2));//nth stair pe ya to main n-1 se aaya hu ya n-2 se
        return ans;
        
        
        
    }
};


Top Down Memoisation:

class Solution {
public:
    int dp[1002];
    int solve (vector<int>&cost,int n)
    {
        if(dp[n]!=-1)
            return dp[n];
        if(n==0)
            return dp[n]=cost[0];
        if(n==1)
            return dp[n]=cost[1];
        int cos=cost[n]+min(solve(cost,n-1),solve(cost,n-2));
        return dp[n]=cos;
    }
    int minCostClimbingStairs(vector<int>& cost) {
        memset(dp,-1,sizeof(dp));
        
        int n=cost.size();
        int ans=min(solve(cost,n-1),solve(cost,n-2));//nth stair pe ya to main n-1 se aaya hu ya n-2 se
        return ans;
        
        
        
    }
};

Bottom UP dp:

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<int>dp(1002,0);
        int n=cost.size();
        dp[0]=cost[0];
        dp[1]=cost[1];
        for(int i=2;i<n;i++)
        {
            dp[i]=cost[i]+min(dp[i-1],dp[i-2]);
        }
        return min(dp[n-1],dp[n-2]);//last stair ki cost nhi leni kyunki uske baad kahi chhadhna nhi 
    }
};

Constant Space Solution:

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        for(int i=2;i<n;i++)
        {
            cost[i]+=min(cost[i-1],cost[i-2]);
        }
        return min(cost[n-1],cost[n-2]);
    }
};

