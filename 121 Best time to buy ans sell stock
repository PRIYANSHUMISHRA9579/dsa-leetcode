https://leetcode.com/problems/best-time-to-buy-and-sell-stock/


Approach 1:
/*

    Time Complexity : O(N), As we iterate the array(prices) two times. Where N = size of the array.

    Space complexity : O(N), Array(maxPrices) space.

    Solved using Dynamic Programming Approach(tabulation).

*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int> maxPrices(n, 0);
        maxPrices[n-1] = prices[n-1];
        for(int i=n-2; i>=0; i--){
            maxPrices[i] = max(maxPrices[i+1], prices[i]); 
        }
        int maxProfit = 0;
        for(int i=0; i<n; i++){
            maxProfit = max(maxProfit, maxPrices[i] - prices[i]); 
        }
        return maxProfit;
    }
};

Approach 2:

/*

    Time Complexity : O(N), As we iterate the array(prices) two times. Where N = size of the array.

    Space Complexity : O(1), Constant space.

    Solved using Dynamic Programming Approach(Space optimisation).

*/
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int buyAtPrice = INT_MAX;
        int maxProfit = 0;
        for(int i=0; i<n; i++){
            buyAtPrice = min(buyAtPrice, prices[i]);
            maxProfit = max(maxProfit, prices[i] - buyAtPrice); 
        }
        return maxProfit;
    }
};
