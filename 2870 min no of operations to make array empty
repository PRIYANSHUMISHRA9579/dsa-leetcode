https://leetcode.com/problems/minimum-number-of-operations-to-make-array-empty/

Intuition
To minimize the number of operations, we want to form groups of elements with equal values. 
We can then apply operations on these groups to reduce their sizes. The goal is to minimize the number of operations required.

MY Approach
calculate the count of occurrences.
For each group with equal values, calculate the number of operations required:
If the count is a multiple of 3, we need count / 3 operations.
If the count is not a multiple of 3, we need count / 3 + 1 operations.
Sum up the operations for all groups.
If, at any point, we encounter a group with a count of 1, it is not possible to empty the array, so return -1.
Return the total number of operations.

class Solution {                    TC O(N)  SC O(N)
public:
    int minOperations(vector<int>& nums) {
        unordered_map<int,int>mp;//count frequency of each no.
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
        for(auto it=mp.begin();it!=mp.end();it++)
        {
            if(it->second==1)
                return -1;
        }
        int count=0;int ans=INT_MAX;
        auto it=mp.begin();
       while(it!=mp.end())
        {
          if(it->second%3==0)
          {
              count+=it->second/3;
          }
           else{
               count+=it->second/3+1;
           }
           it++;
           
            
        }
        return count;
        
    }
};
ANOTHER APPROACH
IN CONSTANT SPACE: BUT O(NLOGN) TC
class Solution {
public:
    int minOperations(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        int res = 0;
        int s = 0;
        while(s < nums.size()){
            int e = s;
            
            while(e < nums.size() && nums[e] == nums[s]) {
                e++;
            }
            int count = e-s;
            if(count == 1) return -1;
            res += count/3;

            if(count%3 != 0) res++;
            s=e;
        }
        return res;
       
    }
};
