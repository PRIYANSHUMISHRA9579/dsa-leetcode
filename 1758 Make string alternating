https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string/

My solution
class Solution {
public:
    int minOperations(string s) {
        int n=s.size();
        string s2="";char ch='0';int c1=0,c2=0,ans=0;
        for(int i=0;i<n;i++)  //how would the string look if starting from 0
        {
            s2+=ch;
            if(ch=='1')
                ch='0';
            else
                ch='1';
        }
        
         string s3="";ch='1';  //how would the string look if start from 1
        for(int i=0;i<n;i++)
        {
            s3+=ch;
            if(ch=='1')
                ch='0';
            else
                ch='1';
        }
        
        
        
        for(int i=0;i<n;i++)   //differences in org string and s2
        {
            if(s2[i]!=s[i])
                c1++;
                
        }
        
        for(int i=0;i<n;i++)  //difference in org string and s3
        {
            if(s3[i]!=s[i])
                c2++;
                
        }
        
       
        return min(c1,c2);
       
    }
};



Much better solution :

Small observation that the sequence of index is [0,1,2,3..],
if we get its module by 2, we get [0,1,0,1,0..],
which is the alternating binary sequence we want.

So we iterate the string,
check if the characters[i] is same as the i % 2.
Note that s[i] is a character,
and s[i] - '0' making it to integer.

We accumulate the number of difference,
which is the number of operation to make it into 01 string.

We can do the same to find out res,
the number of operation for 10 string.
But we don't have to,
becaue this equals to s.length - res.


Complexity
Time O(n)
Space O(1)


Java

    public int minOperations(String s) {
        int res = 0, n = s.length();
        for (int i = 0; i < n; ++i)
            if (s.charAt(i) - '0' != i % 2)
                res++;
        return Math.min(res, n - res);
    }
C++

    int minOperations(string s) {
        int res = 0, n = s.length();
        for (int i = 0; i < n; ++i)
            if (s[i] - '0' != i % 2)
                res++;
        return min(res, n - res);
    }
