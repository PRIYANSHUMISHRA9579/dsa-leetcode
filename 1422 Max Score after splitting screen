https://leetcode.com/problems/maximum-score-after-splitting-a-string/

class Solution {                       TC = O(N^2) MORE OPTIMISED SOLUTION BELOW:
public:
    int count(string s,int key)
    {
        int n=s.size();int c=0;
        for(int i=0;i<n;i++)
        {
            if(s[i]=='0')
                c++;
            
        }
        if(key)
            return (n-c);
        else
            return c;
    }
    int maxScore(string s) {
        int ans=INT_MIN;
        int n=s.size();
        int i=1;
        while(i<n)
        {
            string str1=s.substr(0,i);
            string str2=s.substr(i);
            int count1=count(str1,0);
            int count2=count(str2,1);
            ans=max(ans,count1+count2);
            i++;
        }
        
        return ans;
    }
};





Traverse once to count the number of ones. Travese again to count the left zeroes and right ones using the previous
calculation of ones(they constitute the ones on the right).
If you encounter a 0 increase the left zeroes count and if you encounter a 1, decreaser the right ones count. 
Keep track of the maximum score at each division.




class Solution {                   TC=O(n)
public:
    int maxScore(string s) {
        int leftScore =0;
        int rightScore=0;
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='1')
                rightScore++;
        }
        
        int ans=INT_MIN;
        for(int i=0;i<s.size()-1;i++)
        {
            if(s[i]=='0')
                leftScore++;
            else
                rightScore--;
            ans=max(ans,rightScore+leftScore);
        }
        return ans;
    }
};
