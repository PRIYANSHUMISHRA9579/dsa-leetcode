https://leetcode.com/problems/convert-an-array-into-a-2d-array-with-conditions/


My solution:
class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        vector<vector<int>>ans;
        
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
        {
            mp[nums[i]]++;
        }
        
       
        
       while(!mp.empty())
       {vector<int>v;
         auto it=mp.begin();
        while(it!=mp.end())
          {
           if(it->second>0){
             v.push_back(it->first);
              it->second=it->second-1;}
              if(it->second==0)
              {
                it=  mp.erase(it);
              }
                  else{
                      it++;
                  }
       }
        ans.push_back(v);
       }
        return ans;
        
    }
};



MORE EFFICIENT SOLUTIN :   TC;O(N)  SC:O(N)             https://youtu.be/BR--_W8odmw?si=v-m1E5V5pXV0xiDS

class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        int n=nums.size();
        vector<vector<int>>ans;
        unordered_map<int,int>mp;//to store frequency
        for(int i=0;i<n;i++)
        {
            int freq=mp[nums[i]];
            if(freq==ans.size())
            {
                ans.push_back({});//add one more row
            }
            ans[freq].push_back(nums[i]);
            mp[nums[i]]++;
        }
        return ans;
        
    }
};
