https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule/

https://youtu.be/smTnSl6UKi0?si=_cP42iDQNP4TAwRg

Recursive:
class Solution {
public:
    vector<vector<int>>dp;
    int solve(vector<int>&jd,int n,int idx,int d)
    {
       
        
        //base case
        if(d==1)// you will have to do all jobs and diff will be max of all
        {
         int maxD=jd[idx];//let first difficulty be max
            for(int i=idx;i<n;i++)
            {
                maxD=max(maxD,jd[i]);
            }
            return maxD;
        }
        int maxD=jd[idx];
        int ans=INT_MAX;
        /*
        try one by one with all possibility
        do idx job ,first day and remaining jobs on  otherdays
        or
        do idx,idx+1 job first day and remaining other
        or do idx,idx+1,idx+2 one one day and rem other
        and so on...
        
        */
        
        for(int i=idx;i<=n-d;i++)
        {
            maxD=max(maxD,jd[i]);
            int result=maxD+solve(jd,n,i+1,d-1);
            ans=min(ans,result);
        }
        return ans;
        
        
    }
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int n=jobDifficulty.size();
        if(n<d)return  -1;
        
        return solve(jobDifficulty,n,0,d);
        
        
    }
};


Time Complexity:

The function solve is a recursive function that explores all possible combinations of jobs and days. 
In the worst case, it tries all combinations, leading to an exponential time complexity.
The time complexity is O(n^(d+1)), where 'n' is the number of jobs and 'd' is the number of days.
Space Complexity:

The space complexity is determined by the recursive call stack. In the worst case, the maximum depth of the recursion is 'd'.
Additionally, the function uses a constant amount of space for variables like maxD and ans at each level of recursion.
The space complexity is O(d).




Meimoised:
class Solution {
public:
    vector<vector<int>>dp;
    int solve(vector<int>&jd,int n,int idx,int d)
    {
        if(dp[d][idx]!=-1)
            return dp[d][idx];
        
        //base case
        if(d==1)// you will have to do all jobs and diff will be max of all
        {
         int maxD=jd[idx];//let first difficulty be max
            for(int i=idx;i<n;i++)
            {
                maxD=max(maxD,jd[i]);
            }
            return dp[d][idx]=maxD;
        }
        int maxD=jd[idx];
        int ans=INT_MAX;
        /*
        try one by one with all possibility
        do idx job ,first day and remaining jobs on  otherdays
        or
        do idx,idx+1 job first day and remaining other
        or do idx,idx+1,idx+2 one one day and rem other
        and so on...
        
        */
        
        for(int i=idx;i<=n-d;i++)
        {
            maxD=max(maxD,jd[i]);
            int result=maxD+solve(jd,n,i+1,d-1);
            ans=min(ans,result);
        }
        return dp[d][idx]=ans;
        
        
    }
    int minDifficulty(vector<int>& jobDifficulty, int d) {
        int n=jobDifficulty.size();
        if(n<d)return  -1;
        dp=vector<vector<int>>(d+1,vector<int>(n+1,-1));
        return solve(jobDifficulty,n,0,d);
        
        
    }
};

Time Complexity:

The memoization array dp of size (d+1) x (n+1) is used to store and retrieve intermediate results, avoiding redundant calculations.
The time complexity is improved to O(d * n^2) because each subproblem (combination of idx and d) is solved once and its result is stored for future reference.
Space Complexity:

The space complexity is determined by the memoization array dp and the recursive call stack.
The memoization array is of size (d+1) x (n+1), and the recursive call stack has a maximum depth of 'd'.
The space complexity is O(d * n + d) = O(d * n).
